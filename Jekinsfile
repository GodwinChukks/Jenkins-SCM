pipeline {
    agent any

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build from')
    }

    environment {
        IMAGE_TAG = "godwinchukks/godwin_image:${BUILD_NUMBER}"
        CONTAINER_NAME = "godwin_container"
    }

    stages {

        stage('Clone Repository') {
            steps {
                echo "üì• Cloning from branch: ${params.BRANCH}"
                checkout scmGit(
                    branches: [[name: "*/${params.BRANCH}"]],
                    userRemoteConfigs: [[url: 'https://github.com/GodwinChukks/Jenkins-SCM.git']]
                )
            }
        }

        stage('Install Docker') {
            steps {
                script {
                    if (fileExists('docker.sh')) {
                        echo "üõ†Ô∏è Found docker.sh. Running install..."
                        sh 'chmod +x docker.sh && ./docker.sh'
                    } else {
                        error("‚ùå docker.sh not found. Please add it to the repo root before running.")
                    }
                }
            }
        }

        stage('Verify Workspace') {
            steps {
                echo 'üîç Verifying files in the workspace...'
                sh 'ls -la'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üîß Building Docker image: $IMAGE_TAG"
                sh "docker build -t $IMAGE_TAG ."
            }
        }

        stage('Debug Environment') {
            steps {
                echo 'üß† Printing environment info...'
                sh 'env'
            }
        }

        stage('Cleanup Container') {
            steps {
                echo "üßπ Checking for previous container: $CONTAINER_NAME"
                sh """
                    docker stop $CONTAINER_NAME || true
                    docker rm $CONTAINER_NAME || true
                """
            }
        }

        stage('Run Docker Container') {
            steps {
                echo "üöÄ Starting container: $CONTAINER_NAME"
                sh "docker run -itd --name $CONTAINER_NAME -p 8081:80 $IMAGE_TAG"
            }
        }

        stage('Push to Docker Hub') {
            steps {
                echo "üì¶ Pushing image to Docker Hub..."
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                    sh "docker push $IMAGE_TAG"
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline ran successfully. Image $IMAGE_TAG is live and container is running!"
        }
        failure {
            echo "‚ùå Pipeline failed. Please check the logs and fix the issue."
        }
    }
}
